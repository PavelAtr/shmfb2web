--- backend/backend.c.old	2020-07-16 01:27:23.000000000 +0300
+++ backend/backend.c	2023-03-31 05:27:35.668020609 +0300
@@ -5,6 +5,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 #include <wayland-server-core.h>
 #include <wlr/backend/drm.h>
 #include <wlr/backend/headless.h>
@@ -18,6 +21,10 @@
 #include <wlr/util/log.h>
 #include "backend/multi.h"
 
+#if WLR_HAS_FBDEV_BACKEND
+#include <wlr/backend/fbdev.h>
+#endif
+
 #if WLR_HAS_X11_BACKEND
 #include <wlr/backend/x11.h>
 #endif
@@ -174,6 +181,46 @@
 	return primary_drm;
 }
 
+#if WLR_HAS_FBDEV_BACKEND
+static struct wlr_backend *attempt_fbdev_backend(struct wl_display *display,
+		struct wlr_backend *backend, struct wlr_session *session,
+		wlr_renderer_create_func_t create_renderer_func) {
+	int fbdevs[8];
+	struct wlr_backend *primary_fbdev = NULL;
+	char* shmfb = getenv("SHM_FB");
+	size_t num_fbdevs;
+	if (shmfb == NULL) {
+	    num_fbdevs = wlr_session_find_fbdevs(session, 8, fbdevs);
+	    wlr_log(WLR_INFO, "Found %zu framebuffer devices", num_fbdevs);
+	}
+	else {
+	    num_fbdevs = 1;
+	    fbdevs[0] = shm_open(shmfb, O_RDWR|O_CREAT, S_IRWXU|S_IRWXG);
+	    	    wlr_log(WLR_INFO, "Created %zu shmframebuffer devices", num_fbdevs);
+	}
+
+	for (size_t i = 0; i < num_fbdevs; ++i) {
+		struct wlr_backend *fbdev = wlr_fbdev_backend_create(display,
+			session, fbdevs[i], primary_fbdev,
+			create_renderer_func);
+		if (!fbdev) {
+			wlr_log(WLR_ERROR, "Failed to open framebuffer device %d",
+				fbdevs[i]);
+			continue;
+		}
+
+		if (!primary_fbdev) {
+			primary_fbdev = fbdev;
+		}
+
+		// Each framebuffer backend has one output
+		wlr_fbdev_add_output(fbdev, 0, 0);
+	}
+
+	return primary_fbdev;
+}
+#endif
+
 static struct wlr_backend *attempt_backend_by_name(struct wl_display *display,
 		struct wlr_backend *backend, struct wlr_session **session,
 		const char *name, wlr_renderer_create_func_t create_renderer_func) {
@@ -187,8 +234,9 @@
 		return attempt_headless_backend(display, create_renderer_func);
 	} else if (strcmp(name, "noop") == 0) {
 		return attempt_noop_backend(display);
-	} else if (strcmp(name, "drm") == 0 || strcmp(name, "libinput") == 0) {
-		// DRM and libinput need a session
+	} else if (strcmp(name, "drm") == 0 || strcmp(name, "libinput") == 0
+			|| strcmp(name, "fbdev") == 0) {
+		// DRM, libinput and fbdev need a session
 		if (!*session) {
 			*session = wlr_session_create(display);
 			if (!*session) {
@@ -199,8 +247,13 @@
 
 		if (strcmp(name, "libinput") == 0) {
 			return wlr_libinput_backend_create(display, *session);
-		} else {
+		} else if (strcmp(name, "drm") == 0) {
 			return attempt_drm_backend(display, backend, *session, create_renderer_func);
+#if WLR_HAS_FBDEV_BACKEND
+		} else if (strcmp(name, "fbdev") == 0) {
+			return attempt_fbdev_backend(display, backend, *session,
+				create_renderer_func);
+#endif
 		}
 	}
 
